import filecmp
import sys
import textwrap

sys.path.append('../')
from parse_gbsa_decomp import *


def test_parse_gbsa_decomp():

	df = parse_gbsa_decomp(input='input/ADS158081_cap_reorder_gbsa_decomp.dat', output='output/ADS158081_cap_reorder_gbsa_decomp.csv')

	assert filecmp.cmp('input/ADS158081_cap_reorder_gbsa_decomp.csv', 'output/ADS158081_cap_reorder_gbsa_decomp.csv') is True

	print(list(df['Resname']))
	print(list(df['Resid']))
	print(list(df['Total']))

	assert list(df['Resname']) == ['GLU', 'SER', 'ASP', 'TRP', 'GLY', 'LYS', 'ARG', 'CYS', 'VAL', 'ASP', 'LYS', 'PHE', 'ASP', 'ILE', 'ILE', 'GLY', 'ILE', 'ILE', 'GLY', 'GLU', 'GLY', 'THR', 'TYR', 'GLY', 'GLN', 'VAL', 'TYR', 'LYS', 'ALA', 'LYS', 'ASP', 'LYS', 'ASP', 'THR', 'GLY', 'GLU', 'LEU', 'VAL', 'ALA', 'LEU', 'LYS', 'LYS', 'VAL', 'ARG', 'LEU', 'ASP', 'ASN', 'GLU', 'LYS', 'GLU', 'GLY', 'PHE', 'PRO', 'ILE', 'THR', 'ALA', 'ILE', 'ARG', 'GLU', 'ILE', 'LYS', 'ILE', 'LEU', 'ARG', 'GLN', 'LEU', 'ILE', 'HIE', 'ARG', 'SER', 'VAL', 'VAL', 'ASN', 'MET', 'LYS', 'GLU', 'ILE', 'VAL', 'THR', 'ASP', 'LYS', 'GLN', 'ASP', 'ALA', 'LEU', 'ASP', 'PHE', 'LYS', 'LYS', 'ASP', 'LYS', 'GLY', 'ALA', 'PHE', 'TYR', 'LEU', 'VAL', 'PHE', 'GLU', 'TYR', 'MET', 'ASP', 'HIE', 'ASP', 'LEU', 'MET', 'GLY', 'LEU', 'LEU', 'GLU', 'SER', 'GLY', 'LEU', 'VAL', 'HIE', 'PHE', 'SER', 'GLU', 'ASP', 'HIE', 'ILE', 'LYS', 'SER', 'PHE', 'MET', 'LYS', 'GLN', 'LEU', 'MET', 'GLU', 'GLY', 'LEU', 'GLU', 'TYR', 'CYS', 'HIE', 'LYS', 'LYS', 'ASN', 'PHE', 'LEU', 'HIE', 'ARG', 'ASP', 'ILE', 'LYS', 'CYS', 'SER', 'ASN', 'ILE', 'LEU', 'LEU', 'ASN', 'ASN', 'SER', 'GLY', 'GLN', 'ILE', 'LYS', 'LEU', 'ALA', 'ASP', 'PHE', 'GLY', 'LEU', 'ALA', 'ARG', 'LEU', 'TYR', 'ASN', 'SER', 'GLU', 'GLU', 'SER', 'ARG', 'PRO', 'TYR', 'TPO', 'ASN', 'LYS', 'VAL', 'ILE', 'THR', 'LEU', 'TRP', 'TYR', 'ARG', 'PRO', 'PRO', 'GLU', 'LEU', 'LEU', 'LEU', 'GLY', 'GLU', 'GLU', 'ARG', 'TYR', 'THR', 'PRO', 'ALA', 'ILE', 'ASP', 'VAL', 'TRP', 'SER', 'CYS', 'GLY', 'CYS', 'ILE', 'LEU', 'GLY', 'GLU', 'LEU', 'PHE', 'THR', 'LYS', 'LYS', 'PRO', 'ILE', 'PHE', 'GLN', 'ALA', 'ASN', 'LEU', 'GLU', 'LEU', 'ALA', 'GLN', 'LEU', 'GLU', 'LEU', 'ILE', 'SER', 'ARG', 'LEU', 'CYS', 'GLY', 'SER', 'PRO', 'CYS', 'PRO', 'ALA', 'VAL', 'TRP', 'PRO', 'ASP', 'VAL', 'ILE', 'LYS', 'LEU', 'PRO', 'TYR', 'PHE', 'ASN', 'THR', 'MET', 'LYS', 'PRO', 'LYS', 'LYS', 'GLN', 'TYR', 'ARG', 'ARG', 'ARG', 'LEU', 'ARG', 'GLU', 'GLU', 'PHE', 'SER', 'PHE', 'ILE', 'PRO', 'SER', 'ALA', 'ALA', 'LEU', 'ASP', 'LEU', 'LEU', 'ASP', 'HIE', 'MET', 'LEU', 'THR', 'LEU', 'ASP', 'PRO', 'SER', 'LYS', 'ARG', 'CYS', 'THR', 'ALA', 'GLU', 'GLN', 'THR', 'LEU', 'GLN', 'SER', 'ASP', 'PHE', 'LEU', 'LYS', 'ASP', 'VAL', 'GLU', 'LEU', 'SER', 'LYS', 'MET', 'ALA', 'PRO', 'PRO', 'ASP', 'LEU', 'PRO', 'HIE', 'TRP', 'GLN', 'ASP', 'LIG', 'HIE', 'GLU', 'LEU', 'TRP', 'SER', 'LYS', 'LYS', 'ARG', 'ARG', 'ARG', 'THR', 'LYS', 'PRO', 'CYS', 'TRP', 'TYR', 'TRP', 'ASP', 'LYS', 'LYS', 'ASP', 'LEU', 'ALA', 'HIE', 'THR', 'PRO', 'SER', 'GLN', 'LEU', 'GLU', 'GLY', 'LEU', 'ASP', 'PRO', 'ALA', 'THR', 'GLU', 'ALA', 'ARG', 'TYR', 'ARG', 'ARG', 'GLU', 'GLY', 'ALA', 'ARG', 'PHE', 'ILE', 'PHE', 'ASP', 'VAL', 'GLY', 'THR', 'ARG', 'LEU', 'GLY', 'LEU', 'HIE', 'TYR', 'ASP', 'THR', 'LEU', 'ALA', 'THR', 'GLY', 'ILE', 'ILE', 'TYR', 'PHE', 'HIE', 'ARG', 'PHE', 'TYR', 'MET', 'PHE', 'HIE', 'SER', 'PHE', 'LYS', 'GLN', 'PHE', 'PRO', 'ARG', 'TYR', 'VAL', 'THR', 'GLY', 'ALA', 'CYS', 'CYS', 'LEU', 'PHE', 'LEU', 'ALA', 'GLY', 'LYS', 'VAL', 'GLU', 'GLU', 'THR', 'PRO', 'LYS', 'LYS', 'CYS', 'LYS', 'ASP', 'ILE', 'ILE', 'LYS', 'THR', 'ALA', 'ARG', 'SER', 'LEU', 'LEU', 'ASN', 'ASP', 'VAL', 'GLN', 'PHE', 'GLY', 'GLN', 'PHE', 'GLY', 'ASP', 'ASP', 'PRO', 'LYS', 'GLU', 'GLU', 'VAL', 'MET', 'VAL', 'LEU', 'GLU', 'ARG', 'ILE', 'LEU', 'LEU', 'GLN', 'THR', 'ILE', 'LYS', 'PHE', 'ASP', 'LEU', 'GLN', 'VAL', 'GLU', 'HIE', 'PRO', 'TYR', 'GLN', 'PHE', 'LEU', 'LEU', 'LYS', 'TYR', 'ALA', 'LYS', 'GLN', 'LEU', 'LYS', 'GLY', 'ASP', 'LYS', 'ASN', 'LYS', 'ILE', 'GLN', 'LYS', 'LEU', 'VAL', 'GLN', 'MET', 'ALA', 'TRP', 'THR', 'PHE', 'VAL', 'ASN', 'ASP', 'SER', 'LEU', 'CYS', 'THR', 'THR', 'LEU', 'SER', 'LEU', 'GLN', 'TRP', 'GLU', 'PRO', 'GLU', 'ILE', 'ILE', 'ALA', 'VAL', 'ALA', 'VAL', 'MET', 'TYR', 'LEU', 'ALA', 'GLY', 'ARG', 'LEU', 'CYS', 'LYS', 'PHE', 'GLU', 'ILE', 'GLN', 'GLU', 'TRP', 'THR', 'SER', 'LYS', 'PRO', 'MET', 'TYR', 'ARG', 'ARG', 'TRP', 'TRP', 'GLU', 'GLN', 'PHE', 'VAL', 'GLN', 'ASP', 'VAL', 'PRO', 'VAL', 'ASP', 'VAL', 'LEU', 'GLU', 'ASP', 'ILE', 'CYS', 'HIE', 'GLN', 'ILE', 'LEU', 'ASP', 'LEU', 'TYR', 'SER', 'GLN', 'GLY', 'LYS', 'GLN', 'GLN', 'MET']

	assert list(df['Resid']) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580]

	assert list(df['Total']) == [0.017, 0.003, 0.005, -0.006, 0.003, 0.001, 0.013, 0.008, 0.004, 0.005, 0.006, -0.002, 0.014, 0.012, 0.011, -0.017, -0.05, -2.333, -0.06, -0.206, -0.337, -0.185, -0.043, -0.022, -0.077, -2.05, -0.1, 0.209, -0.012, 0.028, 0.008, 0.006, 0.007, 0.009, 0.011, 0.02, -0.122, -0.333, -1.321, -0.247, -2.68, 0.051, 0.007, 0.007, -0.002, 0.005, 0.002, 0.01, -0.001, 0.001, 0.002, -0.0, -0.006, 0.006, 0.013, -0.009, 0.005, 0.021, 0.095, 0.009, 0.023, 0.005, -0.054, 0.017, 0.012, 0.005, 0.007, -0.019, 0.016, -0.007, -0.053, -0.651, -0.024, -0.054, 0.07, -0.001, -0.001, -0.003, 0.005, 0.012, -0.001, 0.001, 0.001, -0.0, -0.0, 0.001, -0.001, -0.001, -0.001, 0.003, 0.0, 0.003, 0.007, -0.011, -0.059, -0.116, -0.102, -1.39, 0.097, -3.18, -3.295, 0.239, -0.804, -1.196, -0.13, -0.027, -0.24, -0.583, 0.001, 0.023, 0.026, 0.017, -0.046, 0.003, 0.008, -0.019, -0.001, -0.002, 0.0, 0.003, 0.001, 0.007, 0.012, -0.03, -0.006, 0.021, 0.026, 0.005, -0.004, 0.004, 0.01, 0.004, -0.003, 0.005, 0.004, -0.005, 0.003, 0.008, 0.003, 0.004, 0.009, 0.001, 0.042, -0.057, 0.038, 0.173, -0.045, 0.0, -0.285, -0.171, -2.116, -0.125, -0.002, 0.046, 0.018, 0.028, -0.003, -0.009, 0.11, -0.07, -0.534, -0.712, -0.036, 0.045, 0.007, 0.014, -0.001, -0.001, -0.001, -0.0, -0.0, -0.0, -0.0, 0.0, 0.001, 0.0, 0.0, -0.018, 0.002, 0.007, 0.018, 0.012, 0.02, 0.005, 0.0, -0.02, 0.014, -0.005, -0.003, -0.003, 0.001, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.002, 0.002, -0.002, 0.004, 0.01, -0.018, 0.002, 0.005, 0.018, 0.001, 0.001, 0.014, 0.006, -0.003, 0.003, 0.009, 0.003, -0.003, 0.008, 0.035, 0.022, -0.004, -0.001, -0.001, 0.004, 0.0, 0.001, -0.0, -0.002, -0.0, 0.0, 0.003, -0.0, -0.001, 0.001, 0.0, -0.0, 0.001, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.001, 0.002, 0.001, 0.0, 0.001, -0.001, -0.001, -0.001, -0.0, -0.0, 0.001, -0.001, -0.0, 0.0, 0.001, -0.0, -0.001, 0.003, -0.0, -0.002, 0.001, 0.001, -0.0, -0.0, -0.0, -0.0, -0.001, -0.0, 0.001, 0.007, 0.0, 0.002, 0.002, -0.003, 0.001, 0.005, -0.001, -0.0, 0.0, -0.001, -0.001, 0.001, 0.001, -0.001, 0.004, 0.0, 0.003, -0.0, 0.002, 0.004, 0.004, 0.009, 0.004, 0.015, -0.004, -0.007, 0.037, -0.137, -1.043, -10.41, -47.746, -8.24, -0.333, -0.389, -0.06, 0.014, 0.055, 0.009, 0.041, 0.102, 0.007, 0.007, 0.002, -0.0, -0.0, -0.001, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.001, -0.0, 0.0, 0.0, -0.001, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.001, -0.0, 0.0, 0.0, 0.001, -0.0, 0.001, 0.008, 0.001, -0.001, -0.001, 0.0, -0.001, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.001, 0.0, 0.0, 0.0, 0.003, 0.0, 0.003, 0.001, -0.0, 0.002, 0.002, 0.002, 0.001, 0.001, 0.002, -0.005, 0.003, 0.002, 0.002, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0]


def test_average_decomp_2():

	average_decomp(input_list=['input/ADS158081_cap_reorder_gbsa_decomp.dat', 'input/ADS158081_cap_reorder_gbsa_decomp_2.dat'], output='output/ADS158081_cap_reorder_gbsa_decomp_average.csv')

	assert filecmp.cmp('output/ADS158081_cap_reorder_gbsa_decomp_average.csv', 'input/ADS158081_cap_reorder_gbsa_decomp_average.csv') is True	
